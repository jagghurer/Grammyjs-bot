require("dotenv").config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  {
    command: "menu",
    description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é",
  },
  //   {
  //     command: "share",
  //     description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏",
  //   },
  //   {
  //     command: "inline_keyboard",
  //     description: "–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
  //   },
]);

bot.command("start", async (ctx) => {
  await ctx.react("ü§°");
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç, —Ç—ã –ª–æ—Ö!", //{
    // reply_parameters: { message_id: ctx.msg.message_id },
  //}
  );
});

const menuKeyboard = new InlineKeyboard()
  .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Ç—Å –∑–∞–∫–∞–∑–∞", "order-status")
  .text("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support");
const backKeyboard = new InlineKeyboard().text("< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
});

bot.callbackQuery("order-status", async (ctx) => {
  await ctx.callbackQuery.message.editText("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –≤ –ø—É—Ç–∏", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("support", async (ctx) => {
  await ctx.callbackQuery.message.editText("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("back", async (ctx) => {
    await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
      reply_markup: menuKeyboard,
    });
    await ctx.answerCallbackQuery();
  });

// bot.command("mood", async (ctx) => {
//   // const moodKeyboard = new Keyboard().text('–•–æ—Ä–æ—à–æ').row().text('–ü–æ–¥ –ø–∏–≤–∫–æ –ø–æ—Ç—è–Ω–µ—Ç').row().text('–û—Ç—Å—Ç–æ–π').resized().oneTime()

//   const moodLabels = ["–•–æ—Ä–æ—à–æ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–ü–ª–æ—Ö–æ"];
//   const rows = moodLabels.map((label) => {
//     return [Keyboard.text(label)];
//   });
//   const moodKeyboard2 = Keyboard.from(rows).resized().oneTime();

//   await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", {
//     reply_markup: moodKeyboard2,
//   });
// });

// bot.command("share", async (ctx) => {
//   const shareKeyboard = new Keyboard()
//     .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
//     .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
//     .requestPoll("–û–ø—Ä–æ—Å")
//     .placeholder("–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ...")
//     .resized();

//   await ctx.reply("–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ?", {
//     reply_markup: shareKeyboard,
//   });
// });

// bot.command("inline_keyboard", async (ctx) => {
//   const inlineKeyboard = new InlineKeyboard()
//     .text("1", "button-1")
//     .text("2", "button-2")
//     .text("3", "button-3");

//   await ctx.reply("–í—ã–±–µ—Ä–µ—Ç–µ —Ü–∏—Ñ—Ä—É", {
//     reply_markup: inlineKeyboard,
//   });
// });

// bot.callbackQuery([
//   "button-1",
//   "button-2",
//   "button-3"],
//   async (ctx) => {
//     await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É")
//     await ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É");
//   },
// );

// bot.on("callback_query:data", async (ctx) => {
//   await ctx.answerCallbackQuery();
//   await ctx.reply(`–í—ã –Ω–∞–∂–∞–ª–∏: ${ctx.callbackQuery.data}`);
// });

// bot.on(":contact", async (ctx) => {
//   await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!");
// });

// bot.hears("–•–æ—Ä–æ—à–æ", async (ctx) => {
//   await ctx.reply("–ö–ª–∞—Å—Å!", {
//     reply_markup: { remove_keyboard: true },
//   });
// });

// bot.on("msg", async (ctx) => {
//   console.log(ctx.msg);
// });
/*
bot.hears(["–ø–∏–Ω–≥", "–µ—â–µ –ø–∏–Ω–≥"], async (ctx) => {
  await ctx.reply("–ø–æ–Ω–≥");
});
bot.hears(/–ø–∏–∑–¥–µ—Ü/, async (ctx) => {
  await ctx.reply("–†—É–≥–∞–µ–º—Å—è?");
});
bot.hears('ID', async (ctx) => {
    await ctx.reply(`–í–∞—à ID: ${ctx.from.id}`);
  });
  */
/*
// bot.on("message:voice", async (ctx) => {
//   await ctx.reply("–ì–æ–ª–æ—Å –∫–∞–∫ —É —á–µ—Ä—Ç–∞");
// });
// bot.on("message:entities:url", async (ctx) => {
//     await ctx.reply("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ü–ø ?");
//   });
// bot.on('msg').filter((ctx) =>{
//    return ctx.from.id === 1065724677
// },async (ctx) => {
//     await ctx.reply('–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!')
// })
*/
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error", e);
  }
});

bot.start();
